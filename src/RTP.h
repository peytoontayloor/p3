///////////////////////////////////////
// COMP/ELEC/MECH 450/550
// Project 3
// Authors: Swaha Roy and Peyton Elebash
//////////////////////////////////////

#ifndef RANDOM_TREE_H
#define RANDOM_TREE_H

#include "ompl/geometric/planners/PlannerIncludes.h"
#include "ompl/base/ScopedState.h"


namespace ompl
{
    namespace geometric
    {
        class RTP : public base::Planner
        {
            public:
            
            // Constructor
            // TODO: si might need to be &si
            RTP(base::SpaceInformationPtr &si) : Planner(si, "RTP") {}

            // Destructor
            // TODO: may need to override and define in .cpp
            ~RTP() = default;

            // Returns status of attempt to plan based on terminiation condition
            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            // Clears data structs
            void clear() override;

            // Populates data with the tree structure generated by planner
            void getPlannerData(base::PlannerData &data) const override;


            /** starts and parents contain tree such that 
                parent[i] = k where start[k] is parent of start[i].
                
                Ex: 
                starts = [start, sample1, sample2]
                parents = [nullptr, 0, 1]

                Parent of start is none (root).
                Parent of sample1 is start.
                Parent of sample2 is sample1. */
            std::vector<base::ScopedState<>> starts;
            std::vector<size_t> parents;

            private:
            //random number generator
            RNG rng_;
        };

    }  // namespace geometric
}  // namespace ompl

#endif
