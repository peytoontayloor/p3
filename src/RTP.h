///////////////////////////////////////
// COMP/ELEC/MECH 450/550
// Project 3
// Authors: FILL ME OUT!!
//////////////////////////////////////

//do i need includes like shown in example osp planner?
#include "ompl/base/PlannerStatus.h"
#include "ompl/base/PlannerTerminationCondition.h"
#include <ompl/base/Planner.h>

#ifndef RANDOM_TREE_H
#define RANDOM_TREE_H

namespace ompl
{
    namespace geometric
    {
        class RTP : public base::Planner
        {
            public:
            
            //constructor and destructor
            RTP(base::SpaceInformationPtr si) : Planner(si, "RTP") {}
            ~RTP() = default;

            //solve takes a planner termination condition (i.e., time limit) object and 
            //returns a planner status objec, indicating if found solution or not

            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            //clears data structs
            void clear() override;

            //lost on this one a bit --> takes something? and returns a planner data object which contains
            //the entire data structure generated by the planner
            base::PlannerData getPlannerData(base::PlannerData &data) const override;

        //made start and parents global so can access in getPlannerData yippee! 
        //create a vector to store the valid states: 
        std::vector<ScopedState<>> starts;
        //create parents vector that essentially does parent[i] = k or starts[i]'s parent = k
        //parents stores the index of the parent of i in starts vector
        std::vector<size_t> parents;


            private:
            //random number generator
            RNG rng_;



        };

    }  // namespace geometric
}  // namespace ompl

#endif
